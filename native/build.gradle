import java.util.stream.*

project.ext.DEBUG = false

task compileAll{
    group = "alterui natives"
    dependsOn 'compilePlatform', 'compileBase', 'compileGL', 'compileD3D9'
}

task compilePlatform {
    group = "alterui natives"
    doLast {
        buildProject("${projectDir}/modules/${getPlatformName()}")
    }
}

task compileGL {
    group = "alterui natives"
    doLast {
        buildProject("${projectDir}/modules/gl", getPlatformName().toUpperCase())
    }
}

task compileD3D9 {
    group = "alterui natives"
    doLast {
        if(isWin())
            buildProject("${projectDir}/modules/d3d9", getPlatformName().toUpperCase())
    }
}

task compileBase {
    group = "alterui natives"
    doLast {
        buildProject("${projectDir}/modules/base")
    }
}

void buildProject(String project, String... defs){
    if(isWin()) {
        // Uses 'msbuild' to compile project
        String msbuildPath = getCommandOut("${projectDir}\\vswhere -latest -requires Microsoft.Component.MSBuild -find MSBuild\\**\\Bin\\MSBuild.exe")
        println("Compiling native module \"${project.split("/").last()}\":")
        for (i in ["x86", "x64", "ARM64"]) {
            ConsoleOutput output = runCommand(
                    "${defs.length > 0 ? "set CL=/D${String.join(";", defs)} && ": ""}" +                                                // Definitions
                    "\"${msbuildPath}\" \"${project}\" /t:Rebuild /nologo /p:Configuration=Release;Platform=$i;RunCodeAnalysis=False")   // Compilation script

            String status
            if(output.code != 0){
                if(output.text.contains("error MSB4126"))
                    status = "NO MODULE"
                else status = "ERROR"
            }else status = "OK"

            println("\t- $i${".".repeat(15 - i.length())}[${status}]")
        }
    }
}

static String getCommandOut(String command) {
    String suffix = isWin() ? "cmd /c " : ""
    Process p = Runtime.runtime.exec("${suffix}${command}")
    return new BufferedReader(new InputStreamReader(p.inputStream)).lines().collect(Collectors.joining("\n"));
}

ConsoleOutput runCommand(String command){
    if(DEBUG)
        println ">> ${command}"
    String suffix = (isWin() && command.contains("&&")) ? "cmd /c " : ""

    Process p = Runtime.runtime.exec("${suffix}${command}")
    String out = new BufferedReader(new InputStreamReader(p.inputStream)).lines().collect(Collectors.joining("\n"))
    int code = p.waitFor()

    return new ConsoleOutput(code, out)
}

static boolean isWin(){
    return System.getProperty("os.name").toLowerCase().contains("win")
}

static String getPlatformName(){
    if(isWin())
        return "win"
}

class ConsoleOutput {
    int code
    String text

    ConsoleOutput(int code, String text){
        this.code = code
        this.text = text
    }
}
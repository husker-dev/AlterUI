import java.util.stream.Collectors

project.ext.DEBUG = false
project.ext.modules = ['core', 'win', 'gl', 'd3d9']

task buildLibrary(type: GradleBuild){
    group = "alterui"

    List toDo = ['compileNatives']
    for(module in modules)
        toDo.add(":modules:${module}:jar".toString())
    tasks = toDo

    doLast {
        file("$projectDir/build/libs").mkdirs()

        for(module in (List<String>)modules) {
            for(lib in file("$projectDir/modules/$module/build/libs/").listFiles())
                copyFile(lib, file("$projectDir/build/libs/${lib.name}"))
        }
    }
}

task compileNatives(){
    group = "alterui"
    doLast {
        for (module in (List<String>)modules)
            compileNativeProject(module, "$projectDir/modules/${module}/native")
    }
}

void compileNativeProject(String name, String project){
    // TODO: Use MinGW in future
    if(isWin()) {
        // Uses 'msbuild' to compile project
        // and 'vswhere' to find msbuild.exe
        String msbuildPath = runCommand("${projectDir}\\utils\\vswhere -latest -requires Microsoft.Component.MSBuild -find MSBuild\\**\\Bin\\MSBuild.exe").text
        println("Compiling native module \"${name}\":")
        for (i in ["x86", "x64", "ARM64", "ARM"]) {
            ConsoleOutput output = runCommand("\"${msbuildPath}\" \"${project}\\${name}.sln\" /t:Build /nologo /p:Configuration=Release;Platform=$i;RunCodeAnalysis=False")

            String status
            if(output.code != 0){
                if(output.text.contains("error MSB4126"))
                    status = "NO MODULE"
                else status = "ERROR"
            }else status = "OK"

            println("\t- $i${repeat(".", 15 - i.length())}[${status}]")
        }
    }
}

void bindAsDefaultModule(Object a, String moduleName, ArrayList<String> architectures, ArrayList<String> platforms){
    a.jar {
        def ext = new HashMap<String, String>()
        ext.put("win", "dll")
        ext.put("linux", "so")
        ext.put("macos", "dylib")

        archiveBaseName.set("alterui-${libVersion}_$moduleName")
        for(platform in platforms)
            exclude("**/resources/$moduleName/*.${ext.get(platform)}")

        doFirst {
            File dir = new File(a.projectDir, "build/libs")
            dir.deleteDir()
            dir.mkdirs()
        }

        doLast {
            def resourcesFolder = new File(a.projectDir, "build/resources/main")
            for(file in fileTree(resourcesFolder).files){
                for(platform in platforms) {
                    for (arch in architectures) {
                        if (file.name == "${moduleName}_${arch}.${ext.get(platform)}") {
                            String localPath = file.absolutePath.replace(resourcesFolder.absolutePath, "")
                            runCommand("jar cf ${a.projectDir}/build/libs/alterui-${libVersion}-${moduleName}-${platform}-${arch}.jar -C ${resourcesFolder.absolutePath} $localPath")
                        }
                    }
                }
            }
        }
    }
}

/////////////////////////////////
//  Utils
/////////////////////////////////

static boolean isWin(){
    return System.getProperty("os.name").toLowerCase().contains("win")
}

static String repeat(String str, int count){
    return new String(new char[count]).replace("\0", str);
}

ConsoleOutput runCommand(String command, String context = null){
    if(DEBUG)
        println ">> ${command}"
    String suffix = (isWin() && command.contains("&&")) ? "cmd /c " : ""

    Process p
    if(context != null)
        p = Runtime.runtime.exec("${suffix}${command}", new String[0], file(context))
    else
        p = Runtime.runtime.exec("${suffix}${command}")
    String out = new BufferedReader(new InputStreamReader(p.inputStream)).lines().collect(Collectors.joining("\n"))
    int code = p.waitFor()

    return new ConsoleOutput(code, out)
}

static void copyFile(File source, File target){
    try {
        InputStream input = new BufferedInputStream(new FileInputStream(source))
        OutputStream output = new BufferedOutputStream(new FileOutputStream(target))
        byte[] buffer = new byte[1024]
        int lengthRead
        while ((lengthRead = input.read(buffer)) > 0) {
            output.write(buffer, 0, lengthRead)
            output.flush()
        }
        input.close()
        output.close()
    }catch(Exception ignored){ }
}

class ConsoleOutput {
    int code
    String text

    ConsoleOutput(int code, String text){
        this.code = code
        this.text = text
    }
}